#!/usr/bin/env node

var program = require('commander');

var logger = require('./lib/logger.js'),
    pkg = require('./package.json'),
    Bot = require('./lib/bot.js').Bot;


// Inject variables from environment.
program.apiKeys = {
    'BITSTAMP_CLIENT_ID': process.env.BITSTAMP_CLIENT_ID,
    'BITSTAMP_KEY': process.env.BITSTAMP_KEY,
    'BITSTAMP_SECRET': process.env.BITSTAMP_SECRET,
    'BITME_KEY': process.env.BITME_KEY,
    'BITME_SECRET': process.env.BITME_SECRET
}
program.env = {
    'MAILHOST': process.env.MAILHOST,
    'MAILPORT': process.env.MAILPORT,
    'MAILFROM': process.env.MAILFROM,
    'BITME_STAGING_SERVER': process.env.BITME_STAGING_SERVER
};


var printEnvKeys = function(d) {
    for (var key in d) {
        var bullet = d[key] ? '✓' : '✖';
        console.log('    ' + bullet + ' ' + key);
    }
};


var extraHelp = function() {
    // Print API key instructions
    console.log('  API keys loaded from environment variables:\n');
    printEnvKeys(program.apiKeys);
    console.log('');

    console.log('  Additional environment variables:\n');
    printEnvKeys(program.env);
    console.log('');
};


program
    .version(pkg.version)
    .option('-v, --verbosity [level]', 'Set logging level verbosity (warn, info, debug). [info]')
    .option('--LIVE', 'Use real APIs, instead of DummyExchanges.')
    .option('--pretend', '(When live) Don\'t send trades, only print them.')
    .option('--premium <multiplier>', 'Multiplier to apply over remote exchange prices. (1.1 -> 10% premium, 0.9 -> 10% discount)', parseFloat)
    .option('--tolerance <change>', 'Tolerance of relative change of order value. (0.1 -> 10% relative change)', parseFloat)
    .option('--minValue <value>', 'Aggregate orders until their total value exceeds this.', parseFloat)
    .option('--maxOrders <value>', 'Maximum number of orders to maintain on the origin exchange.', parseInt)
    .option('--maxVolatility <change>', 'Abort if market prices exceed the delayed rolling average. (0.1 -> 10% relative change)', parseFloat)
    .option('--resetOnly', 'Start and shutdown immediately after reset.')
    .option('--stopAfter <count>', 'Stop after there have been this many pending trades on the remote exchange.', parseInt)
    .option('--progressInterval <ms>', 'INFO log bot progress at interval instead of per matched trade. (0 to disable)', parseInt)
    .option('--email [address]', 'Send alert-level logs to this email address.')
    .option('--logfile <path>', 'Write debug-level JSON logs to this file.')
    .on('--help', extraHelp);

program.parse(process.argv);


// Determine logger verbosity.
var level = program.verbosity;
if (level === true) {  // true gets translated to 'debug'
    level = 'debug';
} else if (level === undefined) { // default 'info'
    level = 'info';
}
logger.level = level;


// Setup logfile?
if (program.logfile) {
    logger.add(logger.transports.File, {
        filename: program.logfile,
        level: 'debug'
    });
}


// Install email transport for winston?
if (program.email) {
    // TODO: Expose more of this configuration?
    var emailOptions = {
        to: program.email,
        from: program.env.MAILFROM || 'liquid',
        host: program.env.MAILHOST || 'localhost',
        port: program.env.MAILPORT || 25,
        level: 'alert'
    };
    logger.add(logger.transports.Mail, emailOptions);
    logger.debug('Configured alert emails:', emailOptions);
}


// Prepare the bot.
var bot = Bot.fromConfig(program);

// Register signal handlers for graceful shutdown.
var gracefulShutdown = function(err) {
    logger.warn('Shutdown signal caught. Attempting to stop gracefully...');
    bot.stop();

    if (err) {
        logger.alert('Unexpected error triggered shutdown: %s\n', err.message, err.stack);
    }
};
process.on('SIGINT', gracefulShutdown);
process.on('uncaughtException', gracefulShutdown);
// TODO: Use nodejs domains for more resilient error handling? http://nodejs.org/api/domain.html


// Start trading.
bot.start();
