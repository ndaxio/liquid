#!/usr/bin/env node

var pkg = require('./package.json'),
    program = require('commander'),
    Bot = require('./lib/bot.js').Bot;
    logger = require('./lib/logger.js');


// Inject API keys from environment variables.
program.api_keys = {
    'BITSTAMP_CLIENT_ID': process.env.BITSTAMP_CLIENT_ID,
    'BITSTAMP_KEY': process.env.BITSTAMP_KEY,
    'BITSTAMP_SECRET': process.env.BITSTAMP_SECRET,
    'BITME_KEY': process.env.BITME_KEY,
    'BITME_SECRET': process.env.BITME_SECRET
}


var printApiKeys = function() {
    // Print API key instructions
    console.log('  API keys loaded from environment variables:\n');

    for (var key in program.api_keys) {
        var bullet = program.api_keys[key] ? '✓' : '✖';
        console.log('    ' + bullet + ' ' + key);
    }

    console.log('');
};

program
    .version(pkg.version)
    .option('--live', 'Use real APIs (instead of DummyExchanges).')
    .option('--pretend', 'Don\'t send trades, only print them.')
    .option('--premium <multiplier>', 'Multiplier to apply over remote exchange prices. [1.05]', parseFloat)
    .option('-v, --verbosity [level]', 'Set logging level verbosity (warn, info, debug). [info]')
    .on('--help', printApiKeys);

program.parse(process.argv);


// Determine logger verbosity.
var level = program.verbosity;
if (level === true) {
    level = 'debug';
}
logger.level = level;
logger.debug("Set debug level: %j", level);


// Prepare the bot.
var bot = Bot.fromConfig(program);

// Register signal handlers for graceful shutdown.
var gracefulShutdown = function() {
    logger.warn('Shutdown signal caught. Attempting to stop gracefully...');
    bot.stop();
};
process.on('SIGINT', gracefulShutdown);


// Start trading.
bot.start();
